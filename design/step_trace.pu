# VS Code Zesarux Debug

## Using Zesarux Debug


# Redesign
- 3/4 Hauptklassen:
	- DebugAdapter: Interface zu vscode
	- Machine (Registers): Abstrahiert die Machine, vor allem die Register aber auch z.B. Spectrum 48k oder Spectrum128
	- Connector (Socket): Interface zu zesarux.
	- Sourcen: Labels etc. Hat wahrscheinlich Verbindung mit Machine. (?)
- Kommunikation:
	DebugAdapter <-> Machine <-> Connector
- So implementiern, dass man prinzipiell Machine gegen einen anderen Prozessor/Rechner tauschen kann (Vielleicht muss Machine no eine Unterobjekt Processor (fÃ¼r die Register) erhalten) und Connector gegen einen anderen Emulator.

# TODO

- get-current-machine
- error handling: if socket is not connected.
- launch zesarux on start of debug (also remotely)
- backwards stepping -> change zesarux

# To document



# Implementation

## Activation

z80-debug is activated in the 'activate' function in extension.ts
by registering the ZesaruxConfigurationProvider.
This happens e.g. when the Debugger is started.
Short after 'ZesaruxConfigurationProvider::resolveDebugConfiguration' is called.
As the debug adapter is entirely implemented in Typescript it lives in the same process as the extension which simplifies debugging the debug-adapter.
So in 'resolveDebugConfiguration' the 'ZesaruxDebugSession' is instantiated
and started as server (socket). In the same function the server (socket) is also connected by the extension.

Although the same process is used and therefore it is technically possible to directly call methods of the 'ZesaruxDebugSession' it is not done.
Instead the intended way (through 'customRequest' which uses sockets) is chosen.



# Open Items

- After 'set-memory' the watches are not updated. There is no way to tell vscode to update that area. -> github issue/feature request created.
Same for updating PC. I would need to send a stacktrace but I cannot. I can only do so as a response.
- If PC is e.g. in ROM code it cannot be stepped through because the code cannot be seen. I would need to create temporary files with the disassembly.

# Zesarux Wishlist

- step-out
- Breakpoints:
	- Condition: Immediate test if condition syntax is correct. Currently it is possible to write complete nonsense which, of course, is never hit.
	- ClearAllBreakpoints
	- nice: own zesarux Breakpoint ID handling: SetBreakpoint (without ID), get the ID in return






# Backstep support for ZEsarUX

On every opcode that is being processed the context has to be saved before the instruction is processed.
- Z80 registers
- Memory (at least the memory that is going to be changed)
- Memory bank settings
- Ports (in-value)
- HW related states. E.g. sprite positions.

For every opcode a new item with the changed values (i.e. the values before the change, "pre-values")
is added to the record-list.

Depending on the opcode different values need to be changed, so in general this is a dynamical
list with dynamic content.

When the record-list is implemented not only backstepping would be possible, it is also possible to
get a history of the e.g. the register values. I.e. If I want to know if the history of the DE register
ZEsarUX could return a list with the recent value and also the past values together with PC and number of
past opcodes when the value was changed.


## Restriction
For now only the registers should be saved. No other state.
(I need to check if I need to save the RAM memory as well for the stack-trace.)


## Pseudocode (ZEsarUX):

### General
Recording is always on, i.e. the record-list is filled right from the start of ZEsarUX. There is a max. number of entries (e.g. 100000). If this is reached the oldest entry is removed.


### Step back
1. "cpu-step-back" is received: Mode is changed to "reverse-debug-made". The rl_index is decreased.
3. "get-registers" is received: The register values from the record_list[rl_index] is sent.
3. "get-stack-trace" is received: ??? need to check how this list is generated. If it is a simple memory lookup then I need to save the memory values for sure.

### Continue reverse
1. "run-reverse" is received: Mode is changed to "reverse-debug-made". The rl_index is decreased in a loop until (this is done very fast)
	a) the list start is reached
	b) a breakpoint condition is met
2. "get-registers" is received: ... same as above

### Step (forward)
1. "cpu-step" is received while in "reverse-debug-made". The rl_index is increased.
~~~
	If rl_index > record_list then: leave "reverse-debug-made".
~~~
2. "get-registers" is received: ... same as above


### Continue (forward)
1. "run" is received while in "reverse-debug-made". The rl_index is increased in a loop until (this is done very fast)
	a) the list end is reached: leave "reverse-debug-made". Run normal "run" (i.e. continue seemingless with normal run mode).
	b) a breakpoint condition is met
2. "get-registers" is received: ... same as above

### Get historic registers
1. "get-historic-register reg" is received: The record list is checked for changes in the register. The current and the past values are sent together with PC values and information when the change happened. E.g.
~~~
-> "get-historic-register DE"
<-
DE=5F8A
DE=34E9 PC=A123 dCount=15
DE=7896 PC=A089 dCount=2343
~~~
Note: dCount (differential count) is a decimal number, i.e. it can grow bigger than FFFFh.

vscode could show this when hovering above a register.

# Misc

## gdb example

### (gdb) target record-full
Starts the recording

### (gdb) continue-reverse
Goes backward through the recording until start of recording or a breakpoint is hit.

### (gdb) reverse-step / reverse-next
Steps backward.

### (gdb) reverse-finish
Opposite of "step-out". I.e. it "runs" backward until the start of the function.

### (gdb) set exec-direction reverse
All step/run commands work in backward direction.

### (gdb) set record insn-number-max
Set number of maximum instructions for the record list.


# Open
- Check what "get-stack-trace" does.
- How to handle out-port values?
